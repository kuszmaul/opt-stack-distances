CMA Algorithm.  Converted to zero-based indexing

L  lru stack
M  critical markers
B  also same size
 B[i] = |{1 <= c <= M.size() : M[c] <= i}| - i
 Claim B[i] is always non-negative
 Every time M changes B is simply recomputed from M

Initially: arrays are empty

Access(A) {
 search L to find depth of x.
 If not found, it's a cold miss
    critical_capacity = L.size() + 1.
    L.push_front(A)
    increment all items in M by 1
    M.push_back(1)
 If found at top of array
    critical_capacity = 1
 If found at depth D > 1
    //Let Z be the largest index smaller than D with B[i]==0:
    Z = max { i < D : B[i] == 0}
    // Let DO be the smallest c > 1 hvaing M[c] > Z
    DO = min{ C > 1 : M[C] >= Z }
    critical_capacity = DO
    Rotate L to bring X to the top
    Increment All elements of M that are smaller than D
    M[DO] = 1

Observations:  By maintaining some trees we can do all those steps faster.

Example: trace abcdebcfabgd

initially
 L = {}
 M = {}
 B = {}

access a                               1-based indexing
 critical_capacity = 1
 L = {a}                               {a}
 M = {1}                               {1}
 B = {0}                               {0}

access b
 critical_capacity = 2
 L = {b, a}                            {b, a}
 M = {2, 1}                            {2, 1}
                                           *     M[2] < 1
 B = {1, 0}                            {0, 1}

access c
 critical_capacity = 3
 L = {c, b, a}
 M = {a, b, c}
 B = {2, 1, 0}

access d
 critical_capacity = 4
 L = {d, c, b, a}
 M = {a, b, c, d}
 B = {3, 2, 1, 0}

access e
 critical_capacity = 5
 L = {e, d, c, b, a}
 M = {a, b, c, d, e}
 B = {4, 3, 2, 1, 0}

access b.  Something interesting now.  D=3
